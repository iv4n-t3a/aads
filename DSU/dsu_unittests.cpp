#include <gtest/gtest.h>
#include "DSU/dsu.hpp"

TEST(DSUTest, Constructor) {
    Aads::DSU dsu(5);

    for (size_t i = 0; i < 5; ++i) {
        EXPECT_TRUE(dsu.AreSame(i, i));
    }

    EXPECT_FALSE(dsu.AreSame(0, 1));
    EXPECT_FALSE(dsu.AreSame(1, 2));
    EXPECT_FALSE(dsu.AreSame(0, 4));
}

TEST(DSUTest, UniteBasic) {
    Aads::DSU dsu(5);
    dsu.Unite(0, 1);
    EXPECT_TRUE(dsu.AreSame(0, 1));
    EXPECT_FALSE(dsu.AreSame(0, 2));

    dsu.Unite(1, 2);
    EXPECT_TRUE(dsu.AreSame(0, 2));
    EXPECT_TRUE(dsu.AreSame(1, 2));
    EXPECT_FALSE(dsu.AreSame(0, 3));
}

TEST(DSUTest, UniteSameSet) {
    Aads::DSU dsu(5);
    dsu.Unite(0, 1);

    dsu.Unite(0, 1);
    EXPECT_TRUE(dsu.AreSame(0, 1));
    EXPECT_FALSE(dsu.AreSame(0, 2));

    dsu.Unite(1, 0);
    dsu.Unite(0, 1);
    EXPECT_TRUE(dsu.AreSame(0, 1));
}

// Generated by AI, not really checks if path was compressed
TEST(DSUTest, PathCompression) {
    Aads::DSU dsu(5);
    // Create a chain: 0 -> 1 -> 2 -> 3
    dsu.Unite(0, 1);
    dsu.Unite(1, 2);
    dsu.Unite(2, 3);

    // All should be in same set
    EXPECT_TRUE(dsu.AreSame(0, 3));
    EXPECT_TRUE(dsu.AreSame(1, 3));
    EXPECT_TRUE(dsu.AreSame(2, 3));

    // After Find operations, path should be compressed
    // All elements should point to same root
    dsu.AreSame(0, 3); // Trigger path compression
}

TEST(DSUTest, CornerCases) {
    Aads::DSU dsu_empty(0);

    Aads::DSU dsu_single(1);
    EXPECT_TRUE(dsu_single.AreSame(0, 0));

    Aads::DSU dsu_large(1000);
    dsu_large.Unite(0, 999);
    EXPECT_TRUE(dsu_large.AreSame(0, 999));
    EXPECT_FALSE(dsu_large.AreSame(0, 1));
}

TEST(DSUTest, MultipleDisjointSets) {
    Aads::DSU dsu(6);

    dsu.Unite(0, 1);
    dsu.Unite(1, 2);
    dsu.Unite(3, 4);
    dsu.Unite(4, 5);

    EXPECT_TRUE(dsu.AreSame(0, 2));
    EXPECT_TRUE(dsu.AreSame(3, 5));
    EXPECT_FALSE(dsu.AreSame(0, 3));
    EXPECT_FALSE(dsu.AreSame(2, 5));

    dsu.Unite(2, 3);
    EXPECT_TRUE(dsu.AreSame(0, 5));
}

// Generated by AI, not really checks optimization
TEST(DSUTest, RankOptimization) {
    Aads::DSU dsu(5);
    // Create a chain where rank should influence tree structure
    dsu.Unite(0, 1);
    dsu.Unite(2, 3);
    dsu.Unite(1, 2); // Should attach smaller tree to larger

    EXPECT_TRUE(dsu.AreSame(0, 3));
    // After path compression, all should point to same root
    dsu.AreSame(0, 3);
}
